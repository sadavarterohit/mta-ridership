# Results

```{r, echo=FALSE}
#| warning: false
library(tidyverse)
library(dplyr)
library(lubridate)
library(forcats)
library(redav)
```

```{r, echo=FALSE}
#| warning: false
# Load datasets
subway_train_delays <- read_csv("data/MTA_Subway_Trains_Delayed__Beginning_2020_20241118.csv", show_col_types = FALSE)
mta_service_alerts <- read_csv("data/MTA_Service_Alerts__Beginning_April_2020_20241118.csv", show_col_types = FALSE)
subway_wait_assessment <- read_csv("data/MTA_Subway_Wait_Assessment__Beginning_2020_20241119.csv", show_col_types = FALSE)
mta_ridership <- read_csv("data/MTA_Subway_Hourly_Ridership_Data_Modified_v2.csv", show_col_types = FALSE)

```
```{r}
mta_service_alerts_filtered <- 
  mta_service_alerts |> 
  filter(Agency == "NYCT Subway") |> 
  mutate(Date = as.Date(as.POSIXlt(Date, format="%m/%d/%Y %I:%M:%S %p", tz="America/New_York")))
```


```{r}
# Remove the first column from the ridership dataset
mta_ridership_new <- 
  mta_ridership |>
  select(station_complex, year, month, day_type, ridership)
```

```{r}
# Define a mapping of subway lines to their respective groups
subway_groups <- data.frame(
  line = c("1", "2", "3", "4", "5", "6", "7", "A", "C", "E", "B", "D", "F", "M", "G", "J", "Z", "JZ", "L", "N", "Q", "R", "W", "S 42nd", "S Fkln", "S Rock"),
  group = c(
    "IRT - Broadway–Seventh Avenue Line",  # 1, 2, 3
    "IRT - Broadway–Seventh Avenue Line", 
    "IRT - Broadway–Seventh Avenue Line", 
    "IRT - Lexington Avenue Line",         # 4, 5, 6
    "IRT - Lexington Avenue Line", 
    "IRT - Lexington Avenue Line", 
    "IRT - Flushing Line",                 # 7
    "IND - Eighth Avenue Line",            # A, C, E
    "IND - Eighth Avenue Line", 
    "IND - Eighth Avenue Line", 
    "IND - Sixth Avenue Line",             # B, D, F, M
    "IND - Sixth Avenue Line", 
    "IND - Sixth Avenue Line", 
    "IND - Sixth Avenue Line", 
    "IND - Crosstown Line",                # G
    "BMT - Nassau Street Line",            # J, Z
    "BMT - Nassau Street Line", 
    "BMT - Nassau Street Line",
    "BMT - Canarsie Line",                 # L
    "BMT - Broadway Line",                 # N, Q, R, W
    "BMT - Broadway Line", 
    "BMT - Broadway Line", 
    "BMT - Broadway Line",
    "Shuttles",                            # All S lines
    "Shuttles",
    "Shuttles"
  )
)
```

```{r}
subway_wait_assessment_with_groups <- subway_wait_assessment |>
  left_join(subway_groups, by = "line")
```

```{r}
# Define custom colors for the subway groups (based on NYC Subway colors)
subway_group_colors <- c(
  "IRT - Broadway–Seventh Avenue Line" = "#EE352E",# Red
  "IRT - Lexington Avenue Line" = "#00933C",       # Green
  "IRT - Flushing Line" = "#B933AD",               # Purple
  "IND - Eighth Avenue Line" = "#0039A6",          # Blue
  "IND - Sixth Avenue Line" = "#FF6319",           # Orange
  "IND - Crosstown Line" = "#6CBE45",              # Light Green
  "BMT - Nassau Street Line" = "#996633",          # Brown
  "BMT - Canarsie Line" = "#A7A9AC",               # Gray
  "BMT - Broadway Line" = "#FCCC0A",               # Yellow
  "Shuttles" = "#808183"                           # Dark Slate Gray
)
```

```{r}
# Define custom legend labels, showing group name and corresponding lines
custom_legend_labels <- c(
  "IRT - Broadway–Seventh Avenue Line" = "1, 2, 3",
  "IRT - Lexington Avenue Line" = "4, 5, 6",
  "IRT - Flushing Line" = "Flushing (7)",
  "IND - Eighth Avenue Line" = "A, C, E",
  "IND - Sixth Avenue Line" = "B, D, F, M",
  "IND - Crosstown Line" = "Crosstown (G)",
  "BMT - Nassau Street Line" = "J, Z",
  "BMT - Canarsie Line" = "L",
  "BMT - Broadway Line" = "N, Q, R, W",
  "Shuttles" = "S lines"
)
```

```{r}
# Recompute the timepoint counts over each group
wait_assessment_groupwise <- subway_wait_assessment_with_groups |>
  group_by(group, month) |>
  summarize(tp_passed = sum(num_timepoints_passing_wait_assessment, na.rm = TRUE),
            tp_sched = sum(num_sched_timepoints, na.rm = TRUE),
            .groups = "drop") |>
  mutate(`wait assessment` = (1 - tp_passed/tp_sched)*100) |>
  ungroup() |>
  drop_na(group)
```

```{r}
#| fig-width: 10
ggplot(wait_assessment_groupwise, aes(x = month, y = `wait assessment`, color = group, group = group)) +
  geom_line(size = 1) +
  scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") + 
  scale_color_manual(values = subway_group_colors, labels = custom_legend_labels) +
  labs(
    title = "Monthly Wait Assessment by Subway Group",
    x = "Month",
    y = "% timepoints with delays",
    color = "Subway Group (Lines)"
  ) +
  theme(
    text = element_text(size = 14),
    legend.position = "right",
    legend.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```
```{r}
# Filter to include data after July 2020 only
subway_train_delays_filtered <- 
  subway_train_delays |> 
  filter(month >= '2020-07-01')
mta_service_alerts_filtered_v2 <- 
  mta_service_alerts_filtered |> 
  filter(Date >= '2020-07-01')
subway_wait_assessment_filtered <-
  subway_wait_assessment |>
  filter(month >= '2020-07-01')
```

```{r}
monthly_delays <- subway_train_delays_filtered |> 
  group_by(month, day_type) |>
  summarize(delays = sum(delays)) |>
  ungroup()
```


```{r}
monthly_wait_assessment <- subway_wait_assessment_filtered |>
  group_by(month, day_type) |>
  summarize(tp_passed = sum(num_timepoints_passing_wait_assessment, na.rm = TRUE),
            tp_sched = sum(num_sched_timepoints, na.rm = TRUE)) |>
  mutate(`wait assessment` = tp_passed/tp_sched) |>
  ungroup()
```

```{r}
monthly_service_alerts <- mta_service_alerts_filtered_v2 |> 
  mutate(month = make_date(year(Date), month(Date), 1), 
         day_type = ifelse(wday(Date) %in% c(1, 7), 2, 1)) |>
  group_by(month, day_type) |>
  summarize(alert_count = n()) |>
  ungroup()
```
```{r}
monthly_mta_ridership <- mta_ridership_new |>
  mutate(month = make_date(year, month, 1)) |>
  group_by(month, day_type) |>
  summarize(ridership = sum(ridership)) |>
  ungroup()
```
```{r}
df_list <- list(monthly_delays, monthly_service_alerts, monthly_wait_assessment, monthly_mta_ridership)
joined_df <- df_list |> 
  reduce(full_join, by=c('month', 'day_type'))
```

```{r}
#| warning: false
#| fig-width: 10
joined_df |>
  filter(day_type == 1) |>
  mutate(index_delays = round(100*delays/delays[1], 2),
         index_alert_count = round(100*alert_count/alert_count[1], 2),
         index_wait_assmt = round(100*`wait assessment`/`wait assessment`[1], 2),
         index_ridership = round(100*ridership/ridership[1], 2)) |>
  select(month, index_delays, index_alert_count, index_wait_assmt, index_ridership) |>
  pivot_longer(!month, names_to = "parameter", values_to = "index") |>
  
  ggplot(aes(x = month, y = index, color = parameter)) +
  geom_line(size = 1, aes(group = parameter)) +
  scale_x_date(limits = c(as.Date("2020-07-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") +
  scale_color_brewer(palette = "Set1") +
  labs(title = "MTA monthly parameter variation on weekdays", color = "Parameter") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
#| warning: false
#| fig-width: 10
joined_df |>
  filter(day_type == 2) |>
  mutate(index_delays = round(100*delays/delays[1], 2),
         index_alert_count = round(100*alert_count/alert_count[1], 2),
         index_wait_assmt = round(100*`wait assessment`/`wait assessment`[1], 2),
         index_ridership = round(100*ridership/ridership[1], 2)) |>
  select(month, index_delays, index_alert_count, index_wait_assmt, index_ridership) |>
  pivot_longer(!month, names_to = "parameter", values_to = "index") |>
  
  ggplot(aes(x = month, y = index, color = parameter)) +
  scale_x_date(limits = c(as.Date("2020-07-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") +
  geom_line(size = 1, aes(group = parameter)) +
  scale_color_brewer(palette = "Set1") +
  labs(title = "MTA monthly parameter variation on weekends", color = "Parameter") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Factor out the pandemic effect:

```{r}
joined_df_post_pandemic <- joined_df |>
  filter(month >= "2022-07-01")
```


```{r}
#| warning: false
joined_df_post_pandemic |>
  filter(day_type == 1) |>
  mutate(index_delays = round(100*delays/delays[1], 2),
         index_alert_count = round(100*alert_count/alert_count[1], 2),
         index_wait_assmt = round(100*`wait assessment`/`wait assessment`[1], 2),
         index_ridership = round(100*ridership/ridership[1], 2)) |>
  select(month, index_delays, index_alert_count, index_wait_assmt, index_ridership) |>
  pivot_longer(!month, names_to = "parameter", values_to = "index") |>
  
  ggplot(aes(x = month, y = index, color = parameter)) +
  geom_line(size = 1, aes(group = parameter)) +
  scale_x_date(limits = c(as.Date("2022-07-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") +
  scale_color_brewer(palette = "Set1") +
  labs(title = "MTA monthly parameter variation on weekdays (post pandemic)", color = "Parameter") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Scatterplots:

```{r}
joined_data_modified <- joined_df |>
  mutate(period = factor(ifelse(month >= "2022-07-01", "Post-Pandemic", "Pandemic")))
```


```{r}
joined_data_modified |>
  filter(day_type == 1) |>
  ggplot(aes(x = delays/10000, y = ridership/1000000, color = period)) +
  geom_point() +
  labs(
    x = "Monthly Delays (in ten thousands)",
    y = "Monthly Ridership (in millions)",
    color = "Period",
    title = "Ridership vs Delays - Weekdays Only"
  )
```
```{r}
joined_data_modified |>
  filter(day_type == 2) |>
  ggplot(aes(x = delays/10000, y = ridership/1000000, color = period)) +
  geom_point() +
  labs(
    x = "Monthly Delays (in ten thousands)",
    y = "Monthly Ridership (in millions)",
    color = "Period",
    title = "Ridership vs Delays - Weekends Only"
  )
```

```{r}
analysis_month <- as.Date("2023-01-01")

# Choose a number of stations with maximum ridership for plotting
stations_2 <- unique(top_n(mta_ridership_new, 1000, ridership)$station_complex)

scale_val <- 100000

mta_ridership_new |>
  mutate(month = make_date(year, month, 1)) |>
  filter(month == analysis_month) |>
  mutate(day_type = fct_recode(factor(day_type), Weekday = "1", Weekend = "2")) |>
  mutate(ridership = ifelse(day_type == "Weekday", ridership/(5*scale_val), ridership/(2*scale_val))) |>
  filter(station_complex %in% stations_2) |>
  ggplot(aes(x = ridership, y = fct_reorder2(factor(station_complex), day_type == "Weekday", ridership, .desc = FALSE), color = day_type)) +
  geom_point() +
  labs(
    x = "Normalized Ridership (in hundred thousands)",
    y = "",
    color = "Day Type",
    title = paste("Ridership in", analysis_month |> format(format="%b %Y"))
  )
  theme_linedraw(base_size = 7)
```
```{r}
#| fig-width: 11
# Choose a number of stations with maximum ridership for plotting
stations <- unique(top_n(mta_ridership_new, 150, ridership)$station_complex)

mta_stationwise_ridership_wd <- mta_ridership_new |>
  mutate(month = make_date(year, month, 1)) |>
  filter(day_type == 1, station_complex %in% stations)

scale_val_2 <- 1000000
mta_stationwise_ridership_wd |>
  ggplot(aes(x = month, y = ridership/scale_val_2, color = station_complex)) +
  geom_line(size = 1) +
  scale_x_date(limits = c(as.Date("2020-07-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") + 
  scale_color_brewer(palette = "Set2") +
  labs(
    x = "Month",
    y = "Ridership (in millions)",
    color = "Station"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
#| fig-width: 11

mta_stationwise_ridership_we <- mta_ridership_new |>
  mutate(month = make_date(year, month, 1)) |>
  filter(day_type == 2, station_complex %in% stations)

mta_stationwise_ridership_we |>
  ggplot(aes(x = month, y = ridership/scale_val_2, color = station_complex)) +
  geom_line(size = 1) +
  scale_x_date(limits = c(as.Date("2020-07-01"), as.Date("2024-10-01")), 
               date_breaks = "2 months", date_labels = "%b %Y") + 
  scale_color_brewer(palette = "Set2") +
  labs(
    x = "Month",
    y = "Ridership (in millions)",
    color = "Station"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
# Save files for interactivity
# write_csv(mta_stationwise_ridership_wd, "data/MTA_Stationwise_Monthly_Ridership_Weekday.csv")
# write_csv(mta_stationwise_ridership_we, "data/MTA_Stationwise_Monthly_Ridership_Weekend.csv")
```


